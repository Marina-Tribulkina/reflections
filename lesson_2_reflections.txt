1. What happens when you initialize a repository? Why do you need to do it?
	Creating a bunch of metadata about the history of the repository since it was created to make commits of files.
2. How is the staging area different from the working directory and the repository? What value do you think it offers?
<<<<<<< HEAD
	Staging area stands for picking the files to make commits.
3.How can you use the staging area to make sure you have one commit per logical
change?
	git diff --staged
4.What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	To work on different part og project simultaneously
5. How do the diagrams help you visualize the branch structure?
	Dhow all bramches woth all commits to understand unreachable. 
6. What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	The sequence of commits. To show the chronology and order.
7. What are the pros and cons of GitвЂ™s automatic merging vs. always doing merges
manually?	
	
||||||| merged common ancestors
Staging area stands for picking the files to make commits.
=======
Working directoryconsist of all files working with/ Staging areas is for files which is making commit. Staging area stands for picking the files to make commits.
3. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
To make changes in separate part of project simultaneously.
4. How do the diagrams help you visualize the branch structure?
The diagrams show the sequence of commits. It helps to keep track of which brances contains which commits.
5. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The chain of commits.
6. What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Big amount of data.
>>>>>>> fin_vers
